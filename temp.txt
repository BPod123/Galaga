void makeFloatPath(Cords floatRadius)
{
    floatTracker->route.activity = FLOATING;
    floatTracker->route.pathLength = 8;
    floatTracker->route.currentStep = 0;
    for (int i = 0; i < floatTracker->route.pathLength; i++)
    {
        // Go in a counter clockwise circle around the home point
        switch (i)
        {
        case 0:
            floatTracker->route.path[i]->col = floatTracker->home.col + floatRadius.col;
            floatTracker->route.path[i]->row = floatTracker->home.row;
            break;
        case 1:
            floatTracker->route.path[i]->col = floatTracker->home.col; // + floatRadius.col;
            floatTracker->route.path[i]->row = floatTracker->home.row; // + -1 * floatRadius.row;
            break;

        case 2:
            floatTracker->route.path[i]->col = 0 + floatTracker->home.col;
            floatTracker->route.path[i]->row = -1 * floatRadius.row + floatTracker->home.row;
            break;
        case 3:
            floatTracker->route.path[i]->col = -1 * floatRadius.col + floatTracker->home.col;
            floatTracker->route.path[i]->row = -1 * floatRadius.row + floatTracker->home.row;
            break;
        case 4:
            floatTracker->route.path[i]->col = -1 * floatRadius.col + floatTracker->home.col;
            floatTracker->route.path[i]->row = 0 + floatTracker->home.row;
            break;
        case 5:
            floatTracker->route.path[i]->col = -1 * floatRadius.col + floatTracker->home.col;
            floatTracker->route.path[i]->row = floatRadius.row + floatTracker->home.row;
            break;
        case 6:
            floatTracker->route.path[i]->col = 0 + floatTracker->home.col;
            floatTracker->route.path[i]->row = floatRadius.row + floatTracker->home.row;
            break;
        case 7:
            floatTracker->route.path[i]->col = floatRadius.col + floatTracker->home.col;
            floatTracker->route.path[i]->row = floatRadius.row + floatTracker->home.row;
        }
    }
}